# This version hides the underlying postgres database on a backend network
# different from the frontend network on which nginx interfaces mlflow.
# And mlflow is hidden behind nginx, allowing user auth to be implemented.
#
# Have the following environment vars set in shell before running docker-compose
# (suggested values here but can use whatever desired):
# export DB_NAME=mlflowdb
# export DB_USER=postgres

services:

    minio:
        restart: always
        image: minio/minio
        networks:
            - frontend
            - backend
        container_name: minio
        volumes:
            - minio_storage:/minio/storage
        ports:
            - 9000:9000
            - 9001:9001
        environment:
            - MINIO_ROOT_USER=access_key
            - MINIO_ROOT_PASSWORD=secret_key
        command: server /minio/storage --console-address ":9001"

    db:
        restart: always
        image: postgres:latest
        container_name: mlflow_db
        expose:
            - ${DB_PORT}
        networks:
            - backend
        environment:
            - MUID=$UID
            - MGID=$GID
            - POSTGRES_DB=${DB_NAME}
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PW}
        volumes:
            - db_datapg:/var/lib/postgresql/data

    mlflowserver:
        restart: always
        build: ./mlflow
        image: mlflowserver
        container_name: mlflowserver
        working_dir: "/mlflowserver"
        networks:
            - frontend
            - backend
        volumes:
            - mlruns:/mlruns
        environment:
            - BACKEND=postgresql://${DB_USER}:${DB_PW}@db:${DB_PORT}/${DB_NAME}
            - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
            - ARTIFACT=s3://mlflow-artifacts/
            - AWS_ACCESS_KEY_ID=access_key
            - AWS_SECRET_ACCESS_KEY=secret_key
        command:
            - sh    # (sh allows for var substitution of BACKEND and ARTIFACTS)
            - -c
            - mlflow server
                --port ${MLFLOW_PORT}
                --host 0.0.0.0
                --backend-store-uri $${BACKEND}
                --default-artifact-root $${ARTIFACT}
        depends_on:
            - db
            - minio

    nginx:
        restart: always
        build: ./nginx
        image: mlflow_nginx
        container_name: mlflow_nginx
        ports:
            - "80:80"
        networks:
            - frontend
        depends_on:
            - mlflowserver

#    mlflowsftp:
#        restart: always
#        image: atmoz/sftp
#        container_name: mlflowsftp
#        working_dir: "/home/mlflow"
#        volumes:
#            - ./mlflow/artifacts:/home/mlflow/artifacts
#            - ./keys/ssh_sftp_key.pub:/home/mlflow/.ssh/keys/ssh_sftp_key.pub:ro
#            - ./keys/ssh_sftp_key:/etc/ssh/ssh_host_ed25519_key:ro
#        command: mlflow::::artifacts
##        command: mlflow::1001 labs:pass:1002
#        ports:
#          - "2222:22"
#        networks:
#            - frontend
#            - backend

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    db_datapg:
    minio_storage:
    mlruns:
